services:

  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    ports:
      - "8081:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    depends_on:
      oauthmockserver:
        condition: service_started
    restart: on-failure

  mappingservice:
    image: ${DOCKER_REGISTRY-}mappingservice
    build:
      context: .
      dockerfile: MappingService/Dockerfile
    ports:
      - "8082:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    depends_on:
      db_postgres:
        condition: service_healthy
    restart: on-failure

  buildingservice:
    image: ${DOCKER_REGISTRY-}buildingservice
    build:
      context: .
      dockerfile: BuildingService/Dockerfile
    ports:
      - "8083:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    restart: on-failure
    depends_on:
      oauthmockserver:
        condition: service_started

  worksheetservice:
    image: ${DOCKER_REGISTRY-}worksheetservice
    build:
      context: .
      dockerfile: WorkSheetService/Dockerfile
    ports:
      - "8084:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    depends_on:
      db_postgres:
        condition: service_healthy
    restart: on-failure

  db_postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: main_database
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    volumes:
      - db_postgres_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - mymicroservices_network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d main_database"]
      interval: 5s
      timeout: 5s
      retries: 5

  oauthmockserver:
    image: ${DOCKER_REGISTRY-}oauth2mockserver
    build:
      context: .
      dockerfile: OAuth2MockServer/Dockerfile
    ports:
      - "7005:8080"
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      ASPNETCORE_ENVIRONMENT: "Development"
    networks:
      - mymicroservices_network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/swagger/index.html || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  mymicroservices_network:
    driver: bridge

volumes:
  db_postgres_data:
