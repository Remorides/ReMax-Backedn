services:

  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    ports:
      - "8081:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    depends_on:
      userdb_postgres:
        condition: service_healthy
    restart: on-failure

  userdb_postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    volumes:
      - userdb_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mymicroservices_network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d userdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  mappingdb_postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: mappingdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
    volumes:
      - mapping_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - mymicroservices_network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mappingdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  mappingservice:
    image: ${DOCKER_REGISTRY-}mappingservice
    build:
      context: .
      dockerfile: MappingService/Dockerfile
    ports:
      - "8082:8080"
    environment:
      JwtSettings__Secret: super_secret_key_that_is_at_least_32_chars_long_and_very_secure_12345!
    networks:
      - mymicroservices_network
    depends_on:
      mappingdb_postgres:
        condition: service_healthy
    restart: on-failure

networks:
  mymicroservices_network:
    driver: bridge

volumes:
  userdb_data:
  mapping_db_data:
